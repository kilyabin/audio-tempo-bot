"""
Telegram –±–æ—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ pitch –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
"""
import asyncio
import logging
from pathlib import Path
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN, TEMP_DIR, FILE_CLEANUP_HOURS, MAX_FILE_SIZE_BYTES, SUPPORTED_FORMATS
from audio_processor import AudioProcessor
from cleanup import cleanup_old_files

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∞—É–¥–∏–æ
audio_processor = AudioProcessor(TEMP_DIR)


class AudioProcessingStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
    waiting_for_custom_speed = State()


def create_speed_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üêå Slowed (-20%)", callback_data="speed_0.8"),
            InlineKeyboardButton(text="üöÄ Speed Up (+20%)", callback_data="speed_1.2")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="speed_custom")
        ]
    ])
    return keyboard


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üéµ <b>–ë–æ—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ pitch –∞—É–¥–∏–æ</b>\n\n"
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚Ä¢ üêå –ó–∞–º–µ–¥–ª–∏—Ç—å –Ω–∞ 20% (slowed)\n"
        "‚Ä¢ üöÄ –£—Å–∫–æ—Ä–∏—Ç—å –Ω–∞ 20% (speed up)\n"
        "‚Ä¢ ‚úèÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ—é —Å–∫–æ—Ä–æ—Å—Ç—å (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 0.x)\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "üéµ MP3, WAV, FLAC, OGG, M4A, AAC, OPUS\n"
        "üé¨ MP4, AVI, MOV, MKV, WEBM (–∞—É–¥–∏–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
        parse_mode="HTML"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìñ <b>–ü–æ–º–æ—â—å</b>\n\n"
        "üîπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª\n"
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
        "   ‚Ä¢ üêå Slowed (-20%) - –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –Ω–∞ 20%\n"
        "   ‚Ä¢ üöÄ Speed Up (+20%) - —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ 20%\n"
        "   ‚Ä¢ ‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é - –≤–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.8 –∏–ª–∏ 1.5)\n\n"
        "üí° <b>–†—É—á–Ω–æ–π –≤–≤–æ–¥:</b>\n"
        "‚Ä¢ 0.8 = –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –Ω–∞ 20%\n"
        "‚Ä¢ 1.2 = —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ 20%\n"
        "‚Ä¢ 0.5 = –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞\n"
        "‚Ä¢ 2.0 = —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞\n"
        "‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç 0.1 –¥–æ 5.0\n\n"
        "üìÅ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "üéµ –ê—É–¥–∏–æ: MP3, WAV, FLAC, OGG, M4A, AAC, OPUS\n"
        "üé¨ –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV, WEBM\n"
        "(–∞—É–¥–∏–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n\n"
        "üóëÔ∏è –§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞",
        parse_mode="HTML"
    )


@dp.message(F.audio | F.voice | F.document | F.video | F.video_note)
async def handle_audio(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º file_id
    file_id = None
    file_name = None
    mime_type = None
    is_video = False
    file_size = None
    
    if message.audio:
        file_id = message.audio.file_id
        file_name = message.audio.file_name or "audio.mp3"
        mime_type = message.audio.mime_type
        file_size = message.audio.file_size
    elif message.voice:
        file_id = message.voice.file_id
        file_name = "voice.ogg"
        mime_type = "audio/ogg"
        file_size = message.voice.file_size
    elif message.video:
        file_id = message.video.file_id
        file_name = message.video.file_name or "video.mp4"
        mime_type = message.video.mime_type or "video/mp4"
        is_video = True
        file_size = message.video.file_size
    elif message.video_note:
        file_id = message.video_note.file_id
        file_name = "video_note.mp4"
        mime_type = "video/mp4"
        is_video = True
        file_size = message.video_note.file_size
    elif message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name or "file"
        mime_type = message.document.mime_type
        file_size = message.document.file_size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        if mime_type:
            mime_lower = mime_type.lower()
            is_video = 'video' in mime_lower
            if not ('audio' in mime_lower or 'video' in mime_lower):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                ext = Path(file_name).suffix.lower()
                video_exts = ['.mp4', '.avi', '.mov', '.mkv', '.webm', '.flv', '.wmv', '.m4v', '.3gp']
                audio_exts = ['.mp3', '.wav', '.flac', '.ogg', '.m4a', '.aac', '.wma', '.opus', '.amr']
                
                if ext not in audio_exts + video_exts:
                    await message.answer(
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.\n"
                        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: MP3, WAV, FLAC, OGG, M4A, AAC, MP4, AVI, MOV, MKV –∏ –¥—Ä—É–≥–∏–µ"
                    )
                    return
                is_video = ext in video_exts
        else:
            # –ï—Å–ª–∏ mime_type –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            ext = Path(file_name).suffix.lower()
            video_exts = ['.mp4', '.avi', '.mov', '.mkv', '.webm', '.flv', '.wmv', '.m4v', '.3gp']
            audio_exts = ['.mp3', '.wav', '.flac', '.ogg', '.m4a', '.aac', '.wma', '.opus', '.amr']
            
            if ext not in audio_exts + video_exts:
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: MP3, WAV, FLAC, OGG, M4A, AAC, MP4, AVI, MOV, MKV –∏ –¥—Ä—É–≥–∏–µ"
                )
                return
            is_video = ext in video_exts
    
    if not file_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (—Å–Ω–∞—á–∞–ª–∞ –∏–∑ message, –ø–æ—Ç–æ–º –∏–∑ API)
    if file_size and file_size > MAX_FILE_SIZE_BYTES:
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size / 1024 / 1024:.1f} –ú–ë). "
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_BYTES / 1024 / 1024:.0f} –ú–ë"
        )
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ API (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_path)
    try:
        file_info = await bot.get_file(file_id)
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ –≤ message
        if file_info.file_size and file_info.file_size > MAX_FILE_SIZE_BYTES:
            await message.answer(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_info.file_size / 1024 / 1024:.1f} –ú–ë). "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_BYTES / 1024 / 1024:.0f} –ú–ë"
            )
            return
    except Exception as e:
        error_str = str(e).lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –æ –±–æ–ª—å—à–æ–º —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–∞
        if "too big" in error_str or "file is too big" in error_str:
            await message.answer(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–º.\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_BYTES / 1024 / 1024:.0f} –ú–ë\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n"
                f"‚Ä¢ –°–∂–∞—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"
            )
            logger.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram API: {file_name}")
            return
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ."
            )
            return
    
    # –î–ª—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
    if is_video:
        # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ .mp3 –∏–ª–∏ .m4a
        original_path = Path(file_name)
        file_name = f"{original_path.stem}.mp3"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        file_id=file_id,
        file_name=file_name,
        mime_type=mime_type,
        is_video=is_video
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
    file_type = "üé¨ –≤–∏–¥–µ–æ" if is_video else "üéµ –∞—É–¥–∏–æ"
    await message.answer(
        f"‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: <b>{Path(file_name).name}</b> ({file_type})\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_speed_keyboard(),
        parse_mode="HTML"
    )


@dp.callback_query(F.data.startswith("speed_"))
async def handle_speed_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    
    data = callback.data
    user_data = await state.get_data()
    
    if not user_data.get("file_id"):
        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    
    if data == "speed_custom":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        await callback.message.edit_text(
            "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>0.8</code> - –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –Ω–∞ 20%\n"
            "‚Ä¢ <code>1.2</code> - —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ 20%\n"
            "‚Ä¢ <code>0.5</code> - –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞\n"
            "‚Ä¢ <code>2.0</code> - —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 5.0:",
            parse_mode="HTML"
        )
        await state.set_state(AudioProcessingStates.waiting_for_custom_speed)
        await callback.answer()
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
    try:
        speed_factor = float(data.replace("speed_", ""))
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
    await process_audio_file(callback.message, state, speed_factor, user_data)


@dp.message(AudioProcessingStates.waiting_for_custom_speed)
async def handle_custom_speed_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    
    try:
        speed_factor = float(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        if speed_factor < 0.1 or speed_factor > 5.0:
            await message.answer(
                "‚ùå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 5.0\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.8 –∏–ª–∏ 1.2)\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    user_data = await state.get_data()
    await state.clear()
    
    if not user_data.get("file_id"):
        await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
        return
    
    processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
    await process_audio_file(processing_msg, state, speed_factor, user_data)


async def process_audio_file(message: Message, state: FSMContext, speed_factor: float, user_data: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª"""
    
    file_id = user_data["file_id"]
    file_name = user_data["file_name"]
    is_video = user_data.get("is_video", False)
    
    input_path = None
    output_path = None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º
        try:
            file_info = await bot.get_file(file_id)
        except Exception as e:
            error_str = str(e).lower()
            if "too big" in error_str or "file is too big" in error_str:
                await message.edit_text(
                    f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–º.\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_BYTES / 1024 / 1024:.0f} –ú–ë\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"
                )
                return
            else:
                raise
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        original_ext = Path(file_info.file_path).suffix if hasattr(file_info, 'file_path') and file_info.file_path else Path(file_name).suffix
        if not original_ext:
            original_ext = ".mp4" if is_video else ".mp3"
        
        input_path = TEMP_DIR / f"input_{file_id.replace('/', '_').replace('\\', '_')}{original_ext}"
        
        await message.edit_text("üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
        
        try:
            await bot.download_file(file_info.file_path, input_path)
        except Exception as e:
            error_str = str(e).lower()
            if "too big" in error_str or "file is too big" in error_str:
                await message.edit_text(
                    f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_BYTES / 1024 / 1024:.0f} –ú–ë"
                )
                return
            else:
                raise
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ, —Å–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
        if is_video:
            await message.edit_text("üé¨ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...")
            audio_extracted_path = TEMP_DIR / f"extracted_{file_id.replace('/', '_')}.wav"
            
            if not audio_processor.extract_audio_from_video(input_path, audio_extracted_path):
                await message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
                if input_path.exists():
                    input_path.unlink()
                return
            
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
            if input_path.exists():
                input_path.unlink()
            input_path = audio_extracted_path
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_path = TEMP_DIR / audio_processor.get_output_filename(file_name, speed_factor)
        
        await message.edit_text("üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ (–ø–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
        success = audio_processor.process_audio(input_path, speed_factor, output_path, original_filename=file_name)
        
        if not success:
            await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
            # –£–¥–∞–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            if input_path.exists():
                input_path.unlink()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        await message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram
        if not audio_processor.is_telegram_playable_format(output_path):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
            mp3_path = TEMP_DIR / f"{output_path.stem}.mp3"
            await message.edit_text("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3 –¥–ª—è Telegram...")
            
            if audio_processor.convert_to_mp3_for_telegram(output_path, mp3_path):
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º MP3 –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                mp3_filename = Path(output_path.name).stem + ".mp3"
                mp3_file = FSInputFile(mp3_path, filename=mp3_filename)
                
                try:
                    await message.answer_audio(
                        mp3_file,
                        caption=f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ! MP3 –≤–µ—Ä—Å–∏—è</b>\n\n"
                               f"–§–∞–π–ª: {mp3_filename}\n"
                               f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {speed_factor:.2f} ({int((speed_factor - 1) * 100):+d}%)",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ audio, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ document
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å MP3 –∫–∞–∫ audio, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ document: {e}")
                    await message.answer_document(
                        mp3_file,
                        caption=f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ! MP3 –≤–µ—Ä—Å–∏—è</b>\n\n"
                               f"–§–∞–π–ª: {mp3_filename}\n"
                               f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {speed_factor:.2f} ({int((speed_factor - 1) * 100):+d}%)",
                        parse_mode="HTML"
                    )
                
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (FLAC)
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                original_file = FSInputFile(output_path, filename=output_path.name)
                await message.answer_document(
                    original_file,
                    caption=f"üìÅ <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
                           f"–§–∞–π–ª: {output_path.name}\n"
                           f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {speed_factor:.2f} ({int((speed_factor - 1) * 100):+d}%)",
                    parse_mode="HTML"
                )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π MP3 —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                try:
                    mp3_path.unlink()
                    logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π MP3 —Ñ–∞–π–ª: {mp3_path}")
                except:
                    pass
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {output_path} –≤ MP3")
                original_file = FSInputFile(output_path, filename=output_path.name)
                await message.answer_document(
                    original_file,
                    caption=f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
                           f"–§–∞–π–ª: {output_path.name}\n"
                           f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {speed_factor:.2f} ({int((speed_factor - 1) * 100):+d}%)",
                    parse_mode="HTML"
                )
        else:
            # –§–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            audio_file = FSInputFile(output_path, filename=output_path.name)
            
            # –ï—Å–ª–∏ —ç—Ç–æ MP3, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ audio –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if output_path.suffix.lower() == '.mp3':
                try:
                    await message.answer_audio(
                        audio_file,
                        caption=f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
                               f"–§–∞–π–ª: {output_path.name}\n"
                               f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {speed_factor:.2f} ({int((speed_factor - 1) * 100):+d}%)",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ audio, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ document
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ audio, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ document: {e}")
                    await message.answer_document(
                        audio_file,
                        caption=f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
                               f"–§–∞–π–ª: {output_path.name}\n"
                               f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {speed_factor:.2f} ({int((speed_factor - 1) * 100):+d}%)",
                        parse_mode="HTML"
                    )
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (OGG, M4A) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ document
                await message.answer_document(
                    audio_file,
                    caption=f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
                           f"–§–∞–π–ª: {output_path.name}\n"
                           f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {speed_factor:.2f} ({int((speed_factor - 1) * 100):+d}%)",
                    parse_mode="HTML"
                )
        
        await message.delete()
        
        logger.info(f"–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {file_name} -> {output_path.name} (speed: {speed_factor})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        try:
            await message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if input_path and input_path.exists():
            try:
                input_path.unlink()
            except:
                pass
        await state.clear()


async def periodic_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            cleanup_old_files(TEMP_DIR, FILE_CLEANUP_HOURS)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ periodic_cleanup: {e}", exc_info=True)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BOT_TOKEN
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª–µ.")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    asyncio.create_task(periodic_cleanup())
    
    # –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    cleanup_old_files(TEMP_DIR, FILE_CLEANUP_HOURS)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


